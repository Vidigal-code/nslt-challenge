service: order-notification-lambda

provider:
  name: aws
  runtime: nodejs20.x
  region: ${env:AWS_REGION}
  timeout: 30  # Adicione timeout de 30 segundos
  environment:
    NODE_ENV: ${env:NODE_ENV}
    SNS_TOPIC_NAME: ${env:SNS_TOPIC_NAME}
    SNS_TOPIC_ARN: ${env:SNS_TOPIC_ARN}
    MONGO_URI: ${env:MONGO_URI}
    AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    AWS_REGION: ${env:AWS_REGION}

# Serverless 4.x native configuration for TypeScript
build:
  esbuild:
    bundle: true
    minify: false
    target: node20
    exclude:
      - aws-sdk

functions:
  sendOrderNotification:
    handler: src/handler.sendOrderNotification
    timeout: 30  # Timeout específico para esta função
    events:
      - http:
          path: order/notification
          method: post
          cors: false

  processSalesReport:
    handler: src/handler.processSalesReport
    timeout: 30  # Timeout específico para esta função
    events:
      # Runs daily at 9am UTC
      - schedule: cron(0 9 * * ? *)
      # Or via HTTP for manual trigger
      - http:
          path: reports/sales
          method: post
          cors: false

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  serverless-offline:
    host: 0.0.0.0
    httpPort: 4000
    timeout: 30  # Timeout para serverless-offline

resources:
  Resources:
    OrderNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${env:SNS_TOPIC_NAME}